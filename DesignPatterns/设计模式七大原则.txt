面向对象的设计模式有七大基本原则

开闭原则（Open Closed Principle，OCP）
单一职责原则（Single Responsibility Principle, SRP）
里氏代换原则（Liskov Substitution Principle，LSP）
依赖倒转原则（Dependency Inversion Principle，DIP）
接口隔离原则（Interface Segregation Principle，ISP）
合成/聚合复用原则（Composite/Aggregate Reuse Principle，CARP）
最少知识原则（Least Knowledge Principle，LKP）或者迪米特法则（Law of Demeter，LOD）



OCP开闭原则：
对扩展开放，对修改关闭
在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。简言之，是为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类。

SRP单一职责原则：
一个类只负责一个功能领域中的相应职责

LSP里氏代换原则：
所有引用基类的地方必须能透明地使用其子类的对象
里氏代换原则是面向对象设计的基本原则之一。里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。LSP 是继承复用的基石，只有当派生类可以替换掉基类，且软件单位的功能不受到影响时，基类才能真正被复用，而派生类也能够在基类的基础上增加新的行为。里氏代换原则是对开闭原则的补充。实现开闭原则的关键步骤就是抽象化，而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。

DIP依赖倒转原则：
依赖于抽象，不能依赖于具体实现
这个原则是开闭原则的基础，具体内容：针对接口编程，依赖于抽象而不依赖于具体。

ISP接口隔离原则：
类之间的依赖关系应该建立在最小的接口上
使用多个隔离的接口，比使用单个接口要好。它还有另外一个意思是：降低类之间的耦合度。由此可见，其实设计模式就是从大型软件架构出发、便于升级和维护的软件设计思想，它强调降低依赖，降低耦合。

CARP合成/聚合复用原则：
尽量使用合成/聚合，而不是通过继承达到复用的目的

LOD迪米特法则：
一个软件实体应当尽可能少的与其他实体发生相互作用，使得系统功能模块相对独立